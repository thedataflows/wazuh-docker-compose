#!/bin/sh
set -eu

#region logging setup
if [ "${MISE_DEBUG-}" = "true" ] || [ "${MISE_DEBUG-}" = "1" ]; then
	debug() {
		echo "$@" >&2
	}
else
	debug() {
		:
	}
fi

if [ "${MISE_QUIET-}" = "1" ] || [ "${MISE_QUIET-}" = "true" ]; then
	info() {
		:
	}
else
	info() {
		echo "$@" >&2
	}
fi

error() {
	echo "$@" >&2
	exit 1
}
#endregion

#region environment setup
get_os() {
	os="$(uname -s)"
	if [ "$os" = Darwin ]; then
		echo "macos"
	elif [ "$os" = Linux ]; then
		echo "linux"
	else
		error "unsupported OS: $os"
	fi
}

get_arch() {
	musl=""
	if type ldd >/dev/null 2>/dev/null; then
		libc=$(ldd /bin/ls | grep 'musl' | head -1 | cut -d ' ' -f1)
		if [ -n "$libc" ]; then
			musl="-musl"
		fi
	fi
	arch="$(uname -m)"
	if [ "$arch" = x86_64 ]; then
		echo "x64$musl"
	elif [ "$arch" = aarch64 ] || [ "$arch" = arm64 ]; then
		echo "arm64$musl"
	elif [ "$arch" = armv7l ]; then
		echo "armv7$musl"
	else
		error "unsupported architecture: $arch"
	fi
}

get_ext() {
  if [ -n "${MISE_INSTALL_EXT:-}" ]; then
    echo "$MISE_INSTALL_EXT"
  elif [ -n "${MISE_VERSION:-}" ] && echo "$MISE_VERSION" | grep -q '^v2024'; then
    # 2024 versions don't have zstd tarballs
    echo "tar.gz"
  elif tar_supports_zstd; then
    echo "tar.zst"
  elif command -v zstd >/dev/null 2>&1; then
    echo "tar.zst"
  else
    echo "tar.gz"
  fi
}

tar_supports_zstd() {
  # tar is bsdtar or version is >= 1.31
  if tar --version | grep -q 'bsdtar' && command -v zstd >/dev/null 2>&1; then
    true
  elif tar --version | grep -q '1.(3[1-9]|{4-9}\d)'; then
    true
  else
    false
  fi
}

shasum_bin() {
	if command -v shasum >/dev/null 2>&1; then
		echo "shasum"
	elif command -v sha256sum >/dev/null 2>&1; then
		echo "sha256sum"
	else
		error "mise install requires shasum or sha256sum but neither is installed. Aborting."
	fi
}

get_checksum() {
	version=$1
	os="$(get_os)"
	arch="$(get_arch)"
	ext="$(get_ext)"
	url="https://github.com/jdx/mise/releases/download/v${version}/SHASUMS256.txt"

	# For current version use static checksum otherwise
	# use checksum from releases
	if [ "$version" = "v2025.1.9" ]; then
		checksum_linux_x86_64="3b0fddf0ce6de2454e056de4287366480c47dadaad22126e53f6ae881f1a77fb  ./mise-v2025.1.9-linux-x64.tar.gz"
		checksum_linux_x86_64_musl="3657e66d44ad57cfc7673d63e75aaa31400225f17dbc5578e98c9502eb7f38ca  ./mise-v2025.1.9-linux-x64-musl.tar.gz"
		checksum_linux_arm64="2c559fab22e84533e3eda0c5d2a9467e519158b6cdaf431763e5ab36d61ffeb1  ./mise-v2025.1.9-linux-arm64.tar.gz"
		checksum_linux_arm64_musl="8ca66df74531d8383e39bacc1f8bd75ff1e640a33573e74e2a6754b04378d43d  ./mise-v2025.1.9-linux-arm64-musl.tar.gz"
		checksum_linux_armv7="a3178cdbd32a807670e5a0748acb07212447a27bcccaa795146902d6b8711b3b  ./mise-v2025.1.9-linux-armv7.tar.gz"
		checksum_linux_armv7_musl="377ba594d9d91e0b4867bf0f61d1b0969c84d0f8147c612f55ecd97770462804  ./mise-v2025.1.9-linux-armv7-musl.tar.gz"
		checksum_macos_x86_64="6c99300d4f0eb4dd4251382049a5a853ead2fd8ead0971dd9de160e59fc2b633  ./mise-v2025.1.9-macos-x64.tar.gz"
		checksum_macos_arm64="38f7bee4d1dacc3b6680c47ead83c4cf2b151d4d964eba11b7f97d22a6c59660  ./mise-v2025.1.9-macos-arm64.tar.gz"
		checksum_linux_x86_64_zstd="3c167aa89ab256b41b1afa1faeb8f23cde0faed1367f93511a7a23e550a38f70  ./mise-v2025.1.9-linux-x64.tar.zst"
		checksum_linux_x86_64_musl_zstd="d23c177326103242e90f961c27483e284120c7f9b2f646c739e32b3a77dfd15d  ./mise-v2025.1.9-linux-x64-musl.tar.zst"
		checksum_linux_arm64_zstd="c2593eb0358674e22812305a8e6fd6eeb7cae358a488aba8e552938d810acea5  ./mise-v2025.1.9-linux-arm64.tar.zst"
		checksum_linux_arm64_musl_zstd="68ee6e92840240a96e1219812b20ce4382eb073f0e5dab768ece57c083a5d77b  ./mise-v2025.1.9-linux-arm64-musl.tar.zst"
		checksum_linux_armv7_zstd="afd9c55f4b4058212499080b1bef398b192a15572a9afb94da239a7dbd0902e7  ./mise-v2025.1.9-linux-armv7.tar.zst"
		checksum_linux_armv7_musl_zstd="847d348c89c788e90b329e839fec99b0daeb15c78e552464d0d75872c3eb61d0  ./mise-v2025.1.9-linux-armv7-musl.tar.zst"
		checksum_macos_x86_64_zstd="86ae303b1c6a6aeb0a915f4714043e7d144c0ae90630df2e8bff92a3dc3f4f7b  ./mise-v2025.1.9-macos-x64.tar.zst"
		checksum_macos_arm64_zstd="26d067e88c2b94608fff5b436033e90dd0867c2732b4c78e6dd54dcf31e8758a  ./mise-v2025.1.9-macos-arm64.tar.zst"

    # TODO: refactor this, it's a bit messy
		if [ "$(get_ext)" = "tar.zst" ]; then
		  if [ "$os" = "linux" ]; then
        if [ "$arch" = "x64" ]; then
          echo "$checksum_linux_x86_64_zstd"
        elif [ "$arch" = "x64-musl" ]; then
          echo "$checksum_linux_x86_64_musl_zstd"
        elif [ "$arch" = "arm64" ]; then
          echo "$checksum_linux_arm64_zstd"
        elif [ "$arch" = "arm64-musl" ]; then
          echo "$checksum_linux_arm64_musl_zstd"
        elif [ "$arch" = "armv7" ]; then
          echo "$checksum_linux_armv7_zstd"
        elif [ "$arch" = "armv7-musl" ]; then
          echo "$checksum_linux_armv7_musl_zstd"
        else
          warn "no checksum for $os-$arch"
        fi
      elif [ "$os" = "macos" ]; then
        if [ "$arch" = "x64" ]; then
          echo "$checksum_macos_x86_64_zstd"
        elif [ "$arch" = "arm64" ]; then
          echo "$checksum_macos_arm64_zstd"
        else
          warn "no checksum for $os-$arch"
        fi
      else
        warn "no checksum for $os-$arch"
      fi
    else
      if [ "$os" = "linux" ]; then
        if [ "$arch" = "x64" ]; then
          echo "$checksum_linux_x86_64"
        elif [ "$arch" = "x64-musl" ]; then
          echo "$checksum_linux_x86_64_musl"
        elif [ "$arch" = "arm64" ]; then
          echo "$checksum_linux_arm64"
        elif [ "$arch" = "arm64-musl" ]; then
          echo "$checksum_linux_arm64_musl"
        elif [ "$arch" = "armv7" ]; then
          echo "$checksum_linux_armv7"
        elif [ "$arch" = "armv7-musl" ]; then
          echo "$checksum_linux_armv7_musl"
        else
          warn "no checksum for $os-$arch"
        fi
      elif [ "$os" = "macos" ]; then
        if [ "$arch" = "x64" ]; then
          echo "$checksum_macos_x86_64"
        elif [ "$arch" = "arm64" ]; then
          echo "$checksum_macos_arm64"
        else
          warn "no checksum for $os-$arch"
        fi
      else
        warn "no checksum for $os-$arch"
      fi
		fi
	else
		if command -v curl >/dev/null 2>&1; then
			debug ">" curl -fsSL "$url"
			checksums="$(curl --compressed -fsSL "$url")"
		else
			if command -v wget >/dev/null 2>&1; then
				debug ">" wget -qO - "$url"
				stderr=$(mktemp)
				checksums="$(wget -qO - "$url")"
			else
				error "mise standalone install specific version requires curl or wget but neither is installed. Aborting."
			fi
		fi
		# TODO: verify with minisign or gpg if available

		checksum="$(echo "$checksums" | grep "$os-$arch.$ext")"
		if ! echo "$checksum" | grep -Eq "^([0-9a-f]{32}|[0-9a-f]{64})"; then
			warn "no checksum for mise $version and $os-$arch"
		else
			echo "$checksum"
		fi
	fi
}

#endregion

download_file() {
	url="$1"
	filename="$(basename "$url")"
	cache_dir="$(mktemp -d)"
	file="$cache_dir/$filename"

	info "mise: installing mise..."

	if command -v curl >/dev/null 2>&1; then
		debug ">" curl -#fLo "$file" "$url"
		curl -#fLo "$file" "$url"
	else
		if command -v wget >/dev/null 2>&1; then
			debug ">" wget -qO "$file" "$url"
			stderr=$(mktemp)
			wget -O "$file" "$url" >"$stderr" 2>&1 || error "wget failed: $(cat "$stderr")"
		else
			error "mise standalone install requires curl or wget but neither is installed. Aborting."
		fi
	fi

	echo "$file"
}

install_mise() {
	version="${MISE_VERSION:-v2025.1.9}"
	version="${version#v}"
	os="$(get_os)"
	arch="$(get_arch)"
	ext="$(get_ext)"
	install_path="${MISE_INSTALL_PATH:-$HOME/.local/bin/mise}"
	install_dir="$(dirname "$install_path")"
	tarball_url="https://github.com/jdx/mise/releases/download/v${version}/mise-v${version}-${os}-${arch}.${ext}"

	cache_file=$(download_file "$tarball_url")
	debug "mise-setup: tarball=$cache_file"

	debug "validating checksum"
	cd "$(dirname "$cache_file")" && get_checksum "$version" | "$(shasum_bin)" -c >/dev/null

	# extract tarball
	mkdir -p "$install_dir"
	rm -rf "$install_path"
	cd "$(mktemp -d)"
	if [ "$(get_ext)" = "tar.zst" ] && ! tar_supports_zstd; then
    zstd -d -c "$cache_file" | tar -xf -
  else
    tar -xf "$cache_file"
  fi
	mv mise/bin/mise "$install_path"
	info "mise: installed successfully to $install_path"
}

after_finish_help() {
	case "${SHELL:-}" in
	*/zsh)
		info "mise: run the following to activate mise in your shell:"
		info "echo \"eval \\\"\\\$($install_path activate zsh)\\\"\" >> \"${ZDOTDIR-$HOME}/.zshrc\""
		info ""
		info "mise: run \`mise doctor\` to verify this is setup correctly"
		;;
	*/bash)
		info "mise: run the following to activate mise in your shell:"
		info "echo \"eval \\\"\\\$($install_path activate bash)\\\"\" >> ~/.bashrc"
		info ""
		info "mise: run \`mise doctor\` to verify this is setup correctly"
		;;
	*/fish)
		info "mise: run the following to activate mise in your shell:"
		info "echo \"$install_path activate fish | source\" >> ~/.config/fish/config.fish"
		info ""
		info "mise: run \`mise doctor\` to verify this is setup correctly"
		;;
	*)
		info "mise: run \`$install_path --help\` to get started"
		;;
	esac
}

install_mise
if [ "${MISE_INSTALL_HELP-}" != 0 ]; then
  after_finish_help
fi
